{
  "TelemetryEventn$": "Telemetry Event: \\n${p0}",
  "$CommandLineUtility": "${p0} command line utility",
  "UnrecognizedCommand$": "Unrecognized command '${p0}'",
  "Use$ToGetHelp": "Use ${p0} to get help",
  "UnsupportedRegistryScheme$": "Unsupported registry scheme '${p0}'",
  "UnsupportedRegistryKind$": "Unsupported registry kind '${p0}'",
  "InvalidArtifactId$": "Invalid artifact id '${p0}'",
  "FatalTheRootFolder$CanNotBeCreated": "Fatal: The root folder '${p0}' can not be created",
  "FatalTheGlobalConfigurationFile$CanNotBeCreated": "Fatal: The global configuration file '${p0}' can not be created",
  "ErrorParsingConditionalDemand$$": "Error parsing conditional demand '${p0}'- ${p1}",
  "unlessIsNotSupportedInAnUnlessBlock": "\"unless\" is not supported in an unless block",
  "isExpression$IsNotAValidComparisonExpression": "'is' expression (\"${p0}\") is not a valid comparison expression.",
  "MissingIdentity$": "Missing identity '${p0}'",
  "infoidShouldBeOfTypestringFound$": "info.id should be of type 'string', found '${p0}'",
  "MissingVersion$": "Missing version '${p0}'",
  "infoversionShouldBeOfTypestringFound$": "info.version should be of type 'string', found '${p0}'",
  "infosummaryShouldBeOfTypestringFound$": "info.summary should be of type 'string', found '${p0}'",
  "infodescriptionShouldBeOfTypestringFound$": "info.description should be of type 'string', found '${p0}'",
  "infooptionsShouldBeASequenceFound$": "info.options should be a sequence, found '${p0}'",
  "UnsupportedNodeType": "Unsupported node type",
  "UnsupportedFileType$": "Unsupported file type ${p0}",
  "MissingSection$": "Missing section '${p0}'",
  "DuplicateKeysDetectedInManifest$": "Duplicate keys detected in manifest: '${p0}'",
  "Registry$AlreadyExists": "Registry ${p0} already exists.",
  "NotImplementedAsAMapRightNow": "Not Implemented as a map right now.",
  "in$Skipping$BecauseItIsA$": "in ${p0} skipping ${p1} because it is a ${p2}",
  "DuplicateDefine$DuringActivationNewValueWillReplaceOld": "Duplicate define ${p0} during activation. New value will replace old.",
  "DuplicateToolDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate tool declared ${p0} during activation.  New value will replace old.",
  "DuplicateAliasDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate alias declared ${p0} during activation.  New value will replace old.",
  "DuplicateLocationDeclared$DuringActivationNewValueWillReplaceOld": "Duplicate location declared ${p0} during activation. New value will replace old.",
  "CircularVariableReferenceDetected$": "Circular variable reference detected: ${p0}",
  "CircularVariableReferenceDetected$$": "Circular variable reference detected: ${p0} - ${p1}",
  "VariableReferenceFound$$$ThatIsReferencingAnUnknownBaseObject": "Variable reference found '$${p0}.${p1}' that is referencing an unknown base object.",
  "UnresolvedVaribleReferenceFound$$$DuringVariableSubstitution": "Unresolved varible reference found ($${p0}.${p1}) during variable substitution.",
  "InvalidPathDoesNotExist$": "Invalid path - does not exist: ${p0}",
  "Dependency$Version$DoesNotSpecifyTheRegistry": "Dependency '${p0}' version '${p1}' does not specify the registry.",
  "UnableToResolveDependency$$": "Unable to resolve dependency ${p0}: ${p1}",
  "ErrorMessageFromArtifact": "Error message from Artifact",
  "FailedDuringArtifactActivation": "Failed during artifact activation",
  "UnknownInstallerType$": "Unknown installer type ${p0}",
  "UnableToResolve$ToFilesInTheArtifactFolder": "Unable to resolve '${p0}' to files in the artifact folder",
  "Glob$ResolvedToMultipleLocationsUsingFirstLocation": "Glob ${p0} resolved to multiple locations. Using first location.",
  "Artifact": "Artifact",
  "Version": "Version",
  "Status": "Status",
  "Dependency": "Dependency",
  "Summary": "Summary",
  "verifying": "verifying",
  "downloading": "downloading",
  "unpacking": "unpacking",
  "unpacked": "unpacked",
  "working": "working",
  "ErrorInstalling$$": "Error installing ${p0} - ${p1} ",
  "ExpectedASingleValueFor$FoundMultiple": "Expected a single value for ${p0} - found multiple",
  "Synopsis": "Synopsis",
  "Description": "Description",
  "Switches": "Switches",
  "SeeAlso": "See Also",
  "UnableToActivateProject": "Unable to activate project",
  "Project$Activated": "Project ${p0} activated",
  "FailedToActivateProject$": "Failed to activate project ${p0}",
  "ExpectedASingleValueFor$": "Expected a single value for '--${p0}'.",
  "UnableToDownloadFile": "Unable to download file",
  "ItCouldBeThatYourAuthenticationCredentialsAreNotCorrect": " - It could be that your authentication credentials are not correct",
  "DownloadedFile$DidNotHaveTheCorrectHash$$": "Downloaded file '${p0}' did not have the correct hash (${p1}: ${p2}) ",
  "packageReference$IsNotAValidNugetPackageReferencenameversion": "package reference '${p0}' is not a valid nuget package reference ({name}/{version})",
  "statsMayNotBeUndefined": "stats may not be undefined",
  "CannotRenameFilesAcrossFilesystems": "Cannot rename files across filesystems",
  "CopyFailedSource$IsAFolderTarget$IsAFile": "Copy failed: source (${p0}) is a folder, target (${p1}) is a file",
  "UriMayNotBeEmpty": "Uri may not be empty",
  "scheme$AlreadyRegistered": "scheme '${p0}' already registered",
  "uri$HasNoScheme": "uri ${p0} has no scheme",
  "scheme$HasNoFilesystemAssociatedWithIt": "scheme ${p0} has no filesystem associated with it",
  "mayNotRenameAcrossFilesystems": "may not rename across filesystems",
  "PythonIsNotInstalled": "Python is not installed",
  "ThereWasAFailureDuringTheInstallationOfTheespressifTools": "There was a failure during the installation of the .espressif tools.",
  "ThereWasAFailureDuringTheInstallationOfThePythonEnvironementForTheespressifTools": "There was a failure during the installation of the python environement for the .espressif tools.",
  "FailedToActivateEspidf$": "Failed to activate esp-idf - ${p0}",
  "GitIsNotInstalled": "Git is not installed",
  "ExpectedCommaFound$": "Expected comma, found ${p0}",
  "ExpectedOneOfNumberBooleanIdentifierStringFoundToken$": "Expected one of {Number, Boolean, Identifier, String}, found token ${p0}",
  "ExpressionSpecifiedNOTTwice": "Expression specified NOT twice",
  "ExpectedCloseParenthesisForExpressionFound$": "Expected close parenthesis for expression, found ${p0}",
  "ExpectedExpressionFound$": "Expected expression, found ${p0}",
  "ParseErrorDigitExpected": "ParseError: Digit expected (0-9)",
  "ParseErrorHexDigitExpectedFf": "ParseError: Hex Digit expected (0-F,0-f)",
  "ParseErrorBinaryDigitExpected": "ParseError: Binary Digit expected (0,1)",
  "UnexpectedEndOfFileWhileSearchingFor$": "Unexpected end of file while searching for '${p0}'",
  "InvalidEscapeSequence": "Invalid escape sequence",
  "UnknownRegistry$": "Unknown registry '${p0}'",
  "ParseErrorsInMetadataFile$": "Parse errors in metadata file ${p0}}",
  "skippingInvalidMetadataFile$": "skipping invalid metadata file ${p0}",
  "RegistryWithLocation$AlreadyLoadedInThisContext": "Registry with location ${p0} already loaded in this context",
  "RegistryWithADifferentName$AlreadyLoadedInThisContext": "Registry with a different name ${p0} already loaded in this context",
  "ArtifactIdentity$MatchedMoreThanOneResult$": "Artifact identity '${p0}' matched more than one result (${p1}).",
  "UpdatingRegistryDataFrom$": "Updating registry data from ${p0}",
  "$MustBeAString": "${p0} must be a string",
  "$MustBeABool": "${p0} must be a bool",
  "$MustBeAnArrayOfStringsOrUnset": "${p0} must be an array of strings, or unset",
  "MatchedMoreThanOneInstallBlock$": "Matched more than one install block [${p0}]",
  "UnableToCall$$$IsADirectory": "Unable to call ${p0} ${p1} -- ${p2} is a directory",
  "UnableToCall$$$IsNotAFile": "Unable to call ${p0} ${p1} - -- ${p2} is not a file ",
  "ProcessFailed": "Process Failed.",
  "templateRequiredId$NotPresentInTheVisualStudioManifest": "template required id (${p0}) not present in the Visual Studio manifest.",
  "templateRequiredIdVersion$WhichNamesAnIDWithMoreThanOnePackageInTheVisualStudioManifestChoosingFirstVersion$": "template required id version (${p0}) which names an ID with more than one package in the Visual Studio manifest; choosing first version '${p1}'.",
  "$IsMissingAninfoMap": "${p0} is missing an 'info' map.",
  "$UseOfAdoptvsixversionfromidWasNotAnIdString": "${p0} use of adopt-vsix-version-from-id was not an id string",
  "$UseOfInstallVsixNamedID$WasNotPresentInTheVisualStudioManifest": "${p0} use of install vsix, named ID ${p1} was not present in the Visual Studio manifest.",
  "$UseOfInstallVsixNamedID$HadMultiplePackagesInTheVisualStudioManifestButNotAllPackagesHadLanguageSet": "${p0} use of install vsix, named ID ${p1} had multiple packages in the Visual Studio manifest, but not all packages had language set.",
  "$UseOfInstallVsixNamedID$HadMultipleMatchesForTheSameLanguage": "${p0} use of install vsix, named ID ${p1} had multiple matches for the same language.",
  "vsixVersionRequireMustBeAMapIn$": "vsixVersionRequire must be a map in ${p0}.",
  "vsixVersionRequireEntryDidNotHaveTheExpectedFormIn$": "vsixVersionRequire entry did not have the expected form in ${p0}.",
  "vsixVersionRequireContainedDuplicateKey$ChoosingTheSecond": "vsixVersionRequire contained duplicate key ${p0}; choosing the second.",
  "FailedToInterpret$AsAnAMFTemplate": "Failed to interpret ${p0} as an AMF template.",
  "FailedToParse$AsAYAMLDocument$": "Failed to parse ${p0} as a YAML document: ${p1}",
  "YAMLWarningsWhenParsing$$": "YAML warnings when parsing ${p0}: ${p1}",
  "UnexpectedFormatForVisualStudioManifestInChannel": "Unexpected format for Visual Studio manifest in channel.",
  "UnexpectedVisualStudioChannelManifestVersion": "Unexpected Visual Studio channel manifest version.",
  "$CanOnlyContain$Once": "${p0} can only contain ${p1} once",
  "AcquireArtifactsInTheRegistry": "Acquire artifacts in the registry",
  "ThisAllowsTheConsumerToAcquiredownloadAndUnpackArtifactsArtifactsMustBeActivatedToBeUsed": "This allows the consumer to acquire (download and unpack) artifacts. Artifacts must be activated to be used",
  "NoArtifactsSpecified": "No artifacts specified",
  "MultiplePackagesSpecifiedButNotAnEqualNumberOf$Switches": "Multiple packages specified, but not an equal number of ${p0} switches.",
  "NoArtifactsAreAcquired": "No artifacts are acquired",
  "AllArtifactsAreAlreadyInstalled": "All artifacts are already installed",
  "$ArtifactsInstalledSuccessfuly": "${p0} artifacts installed successfuly",
  "InstallationFailedStopping": "Installation failed -- stopping",
  "ActivatesTheToolsRequiredForAProject": "Activates the tools required for a project",
  "ThisAllowsTheConsumerToActivateTheToolsRequiredForAProjectIfTheToolsAreNotAlreadyInstalledThisWillForceThemToBeDownloadedAndInstalledBeforeActivation": "This allows the consumer to Activate the tools required for a project. If the tools are not already installed, this will force them to be downloaded and installed before activation.",
  "UnableToFindProjectInFolderorParentFoldersFor$": "Unable to find project in folder (or parent folders) for ${p0}",
  "AddsAnArtifactToTheProject": "Adds an artifact to the project",
  "ThisAllowsTheConsumerToAddAnArtifactToTheProjectThisWillActivateTheProjectAsWell": "This allows the consumer to add an artifact to the project. This will activate the project as well.",
  "MultipleArtifactsSpecifiedButNotAnEqualNumberOf$Switches": "Multiple artifacts specified, but not an equal number of ${p0} switches",
  "TheURIToTheVisualStudioChannelToApply": "The URI to the Visual Studio channel to apply.",
  "TheDirectoryPathToTheRootOfTheRepoIntoWhichArtifactMetadataIsToBeGenerated": "The directory path to the root of the repo into which artifact metadata is to be generated.",
  "ApplyVisualStudioChannelvsmanInformationToAPrototypicalArtifactMetadata": "Apply Visual Studio Channel (.vsman) information to a prototypical artifact metadata.",
  "ThisIsUsedToMintArtifactsMetadataExactlyCorrespondingToAReleaseStateInAVisualStudioChannel": "This is used to mint artifacts metadata exactly corresponding to a release state in a Visual Studio channel.",
  "Processing$": "Processing ${p0}...",
  "SkippedProcessing$": "Skipped processing ${p0}",
  "AfterTransformation$DidNotResultInAValidAMFSkippingn$n$": "After transformation, ${p0} did not result in a valid AMF; skipping:\\n${p1}\\n${p2}",
  "AfterTransformation$ResultsIn$WhichAlreadyExistsOverwriting": "After transformation, ${p0} results in ${p1} which already exists; overwriting.",
  "DownloadingChannelManifestFrom$": "Downloading channel manifest from ${p0}",
  "DownloadingVisualStudioManifestVersion$$": "Downloading Visual Studio manifest version ${p0} (${p1})",
  "Processed$Templates": "Processed ${p0} templates.",
  "ManagesTheDownloadCache": "Manages the download cache",
  "CacheFolderCleared$": "Cache folder cleared (${p0}) ",
  "File": "File",
  "Size": "Size",
  "Date": "Date",
  "cleansOutEverythingcacheInstalledArtifacts": "cleans out everything (cache, installed artifacts)",
  "cleansOutTheCache": "cleans out the cache",
  "removesAllTheArtifactsThatAreInstalled": "removes all the artifacts that are installed",
  "cleansUp": "cleans up",
  "AllowsTheUserToCleanOutTheCacheInstalledArtifactsEtc": "Allows the user to clean out the cache, installed artifacts, etc.",
  "DeactivatingProject": "Deactivating project",
  "InstalledArtifactFolderCleared$": "Installed Artifact folder cleared (${p0}) ",
  "DeactivatesTheCurrentSession": "Deactivates the current session",
  "ThisAllowsTheConsumerToRemoveEnvironmentSettingsForTheCurrentlyActiveSession": "This allows the consumer to remove environment settings for the currently active session.",
  "DeactivatingProject$": "Deactivating project ${p0}",
  "DeletesAnArtifactFromTheArtifactFolder": "Deletes an artifact from the artifact folder",
  "ThisAllowsTheConsumerToRemoveAnArtifactFromDisk": "This allows the consumer to remove an artifact from disk.",
  "DeletingArtifact$From$": "Deleting artifact ${p0} from ${p1}",
  "FindArtifactsInTheRegistry": "Find artifacts in the registry",
  "ThisAllowsTheUserToFindArtifactsBasedOnSomeCriteria": "This allows the user to find artifacts based on some criteria.",
  "theNameOfTheCommandForWhichYouWantHelp": "the name of the command for which you want help",
  "getHelpOn$OrOneOfTheCommands": "get help on ${p0} or one of the commands",
  "GetsDetailedHelpOn$OrOneOfTheCommands": "Gets detailed help on ${p0}, or one of the commands",
  "Arguments": "Arguments:",
  "Use$ToGetTheListOfAvailableCommands": "Use ${p0} to get the list of available commands",
  "Usage": "Usage",
  "$COMMANDargumentsswitches": "${p0} COMMAND <arguments> [--switches]",
  "Available$Commands": "Available ${p0} commands:",
  "ListsTheArtifacts": "Lists the artifacts",
  "ThisAllowsTheConsumerToListArtifacts": "This allows the consumer to list artifacts.",
  "CreatesANewProjectFile": "Creates a new project file",
  "ThisAllowsTheConsumerCreateANewProjectFile$": "This allows the consumer create a new project file ('${p0}').",
  "TheFolderAt$AlreadyContainsAProjectFile$": "The folder at ${p0} already contains a project file '${p1}'",
  "regenerateTheIndexForARegistry": "regenerate the index for a registry",
  "ThisAllowsTheUserToRegenerateThe$FilesForA$Registry": "This allows the user to regenerate the ${p0} files for a ${p1} registry.",
  "Registry$DoesNotHaveAnIndexToRegenerate": "Registry: '${p0}' does not have an index to regenerate.",
  "RegeneratingIndexFor$": "Regenerating index for ${p0}",
  "RegenerationCompleteIndexContains$MetadataFiles": "Regeneration complete. Index contains ${p0} metadata files",
  "Registry$ContainsNoArtifacts": "Registry: '${p0}' contains no artifacts.",
  "UnrecognizedRegistry$": "Unrecognized registry: ${p0}",
  "RegenerationFailedFor$": "Regeneration failed for ${p0}",
  "RemovesAnArtifactFromAProject": "Removes an artifact from a project",
  "ThisAllowsTheConsumerToRemoveAnArtifactFromTheProjectForcesReactivationInThisWindow": "This allows the consumer to remove an artifact from the project. Forces reactivation in this window.",
  "Removing$FromProjectManifest": "Removing ${p0} from project manifest",
  "unableToFindArtifact$InTheProjectManifest": "unable to find artifact ${p0} in the project manifest",
  "updateTheRegistryFromTheRemote": "update the registry from the remote",
  "ThisDownloadsTheLatestContentsOfTheRegistryFromTheRemoteService": "This downloads the latest contents of the registry from the remote service.",
  "DownloadingRegistryData": "Downloading registry data",
  "Updated$RegistryContains$MetadataFiles": "Updated ${p0}. registry contains ${p1} metadata files",
  "UnableToDownloadRegistrySnapshot": "Unable to download registry snapshot",
  "UnableToFindRegistry$": "Unable to find registry ${p0}",
  "ArtifactRegistryDataIsNotLoaded": "Artifact registry data is not loaded",
  "AttemptingToUpdateArtifactRegistry": "Attempting to update artifact registry",
  "UnableToLoadRegistryIndex": "Unable to load registry index",
  "InstantlyActivatesAnArtifactOutsideOfTheProject": "Instantly activates an artifact outside of the project",
  "ThisWillInstantlyActivateAnArtifact": "This will instantly activate an artifact .",
  "NoArtifactsAreBeingAcquired": "No artifacts are being acquired",
  "ActivatingIndividualArtifacts": "Activating individual artifacts",
  "checkToSeeIfANewerVersionOf$IsAvailable": "check to see if a newer version of ${p0} is available",
  "willUpdateTheCurrentInstallationOf$IfANewerVersionIsAvailable": "will update the current installation of ${p0} if a newer version is available",
  "manageTheVersionOf$": "manage the version of ${p0}",
  "ThisAllowsTheUserToGetTheCurrentVerisonInformationFor$": "This allows the user to get the current verison information for ${p0}",
  "asWellAsCheckingIfANewVersionIsAvailableAndCanUpgradeTheCurrentInstallationToTheLatestVersion": "as well as checking if a new version is available, and can upgrade the current installation to the latest version.",
  "UnableToParseVersion$": "Unable to parse version ${p0}",
  "checkingToSeeIfThereIsANewVersionOfThe$AndUpdatingIfThereIs": "checking to see if there is a new version of the ${p0}, and updating if there is",
  "checkingToSeeIfThereIsANewVersionOfThe$": "checking to see if there is a new version of the ${p0}",
  "ThereIsANewVersion$Of$Available": "There is a new version (${p0}) of ${p1} available",
  "FailedToGetLatestVersionNumber$": "Failed to get latest version number. (${p0})",
  "$VersionInformationn": "${p0} version information\\n",
  "version$": "  version: ${p0} ",
  "UsageOfVcpkgceIsSubjectToLicenseTermsAvailableAt$": "Usage of vcpkg-ce is subject to license terms available at ${p0}",
  "ThirdpartyLicenseInformationIsAvailableAt$": "Third-party license information is available at ${p0}",
  "removesAllFilesInTheLocalCache": "removes all files in the local cache",
  "enablesDebugModeDisplaysInternalMesssagesAboutHow$Works": "enables debug mode, displays internal messsages about how ${p0} works",
  "proceedsWithThepotentiallyDangerousActionWithoutConfirmation": "proceeds with the (potentially dangerous) action without confirmation",
  "showsTheinstalledArtifacts": "shows the _installed_ artifacts",
  "FullPathToTheFileInWhichMSBuildPropertiesWillBeWritten": "Full path to the file in which MSBuild properties will be written.",
  "overrideThePathToTheProjectFolder": "override the path to the project folder",
  "UnableToFindProjectEnvironment$": "Unable to find project environment ${p0}",
  "overrideThePathToTheRegistry": "override the path to the registry",
  "failedToLoadRegistry$": "failed to load registry ${p0}",
  "InvalidRegistry$": "Invalid registry ${p0}",
  "enablesVerboseModeDisplaysVerboseMesssagesAboutTheProcess": "enables verbose mode, displays verbose messsages about the process",
  "aVersionOrVersionRangeToMatch": "a version or version range to match",
  "doesNotActuallyPerformTheActionShowsOnlyWhatWouldBeDone": "does not actually perform the action, shows only what would be done"
}